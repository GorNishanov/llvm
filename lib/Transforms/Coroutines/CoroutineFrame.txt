RE: Calling a null pointer. How undefined it is?

Hi all:

This question is related to a state machine generated by LLVM for a coroutine.
I stripped all coroutine related details to get to the essence of the question.

Let's say I have a state machine that looks like this:

  struct State {
    FnPtr Fn;
    State() : Fn(&SomeFunction) {}

    void Go() { (*Fn)(); }
    void Stop() { Fn = nullptr; }
    bool IsDone() { return Fn == nullptr; }
  };

Fn field serves two purposes:

* Cheap check for done. What can be better than compare with zero!
* Guard against programmer mistake, accidentally calling Go() when in a 
  Stopped state. 

Is it an appropriate use of undefined behavior?

Thank you,
Gor
